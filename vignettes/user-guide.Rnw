%\VignetteEngine{knitr}
%\VignetteIndexEntry{User guide}
%\VignetteDepends{knitr, photobiology, photobiologyWavebands, ggspectra, photobiologyInOut, ggplot2, ggmap, lubridate, hyperSpec, pavo}
%\VignetteKeyword{misc}

\documentclass{article}

\usepackage[utf8]{inputenc}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\usepackage{listings}
\usepackage{booktabs}
\usepackage{bbding}
\usepackage{xspace}
\usepackage{framed}

\newcommand{\PB}{\textsf{photobiology}\xspace}
\newcommand{\PBPL}{\textsf{photobiologyPlants}\xspace}
\newcommand{\PBFLT}{\textsf{photobiologyFilters}\xspace}
\newcommand{\PBSU}{\textsf{photobiologySun}\xspace}
\newcommand{\PBLA}{\textsf{photobiologyLamps}\xspace}
\newcommand{\PBLD}{\textsf{photobiologyLEDs}\xspace}
\newcommand{\PBSN}{\textsf{photobiologySensors}\xspace}
\newcommand{\PBWB}{\textsf{photobiologyWavebands}\xspace}
\newcommand{\PBIO}{\textsf{photobiologyInOut}\xspace}

\newcommand{\Unit}[1]{\ensuremath{\mathrm{#1}}\xspace}

\newcommand{\watt}{\Unit{W\,m^{-2}}}
\newcommand{\wattnm}{\Unit{W\,m^{-2}\,nm^{-1}}}
\newcommand{\mwattnm}{\Unit{mW\,m^{-2}\,nm^{-1}}}
\newcommand{\mol}{\Unit{mol\,m^{-2}\,s^{-1}}}
\newcommand{\molnm}{\Unit{mol\,m^{-2}\,s^{-1}\,nm^{-1}}}

\begin{document}

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
opts_chunk$set(fig.path='figure/pos-', fig.align='center', fig.show='hold',
               fig.width=7, fig.height=6, size="footnotesize")
options(replace.assign = TRUE, width = 55,
        warnPartialMatchAttr = FALSE,
        warnPartialMatchDollar = FALSE,
        warnPartialMatchArgs = FALSE)
@

<<example-0-hiden, eval=TRUE, include=FALSE>>=
# this may be needed in some geographic locations as some Windows TZ strings are
# not recognized by all versions of R
Sys.setenv(TZ = 'UTC')
library(photobiology)
library(photobiologyWavebands)
library(photobiologyInOut)
library(lubridate)
library(ggplot2)
library(ggmap)
library(ggspectra)
library(hyperSpec)
library(pavo)
@

<<own-set-up, echo=FALSE, include=FALSE>>=
my_version <- packageVersion("photobiologyInOut")
@

\title{\PBIO Version \Sexpr{my_version}\\ User Guide}
\author{Pedro J. Aphalo}

\maketitle

\tableofcontents

\section{Introduction}

<<example-0-hiden, eval=FALSE, include=TRUE>>=
@

<<>>=
options(dplyr.print_max = 5)
options(dplyr.print_min = 3)
@

This package defines functions for importing spectral data from
different instruments (Table \ref{tab:funs:inst}), simulation
models (Table \ref{tab:funs:simul}), and for data exchange with R packages
'hyperSpec' and 'pavo' (Table \ref{tab:funs:rpkgs}).

\begin{table}[h]
\caption{Functions for importing measured spectral emission data}\label{tab:funs:inst}
\centering
\begin{tabular}{llll}
\toprule
R function & Instrument & Program & return\\
\midrule
read\_oo\_ssirrad() & Ocean Optics spectrometers & SpectraSuite & source\_spct \\
read\_oo\_ssdata() & Ocean Optics spectrometers & SpectraSuite & raw\_spct  \\
read\_oo\_jazirrad() & Ocean Optics Jaz          & \emph{instrument}  & source\_spct  \\
read\_oo\_jazdata() & Ocean Optics Jaz          & \emph{instrument} & raw\_spct  \\
read\_avaspec\_csv() & Avantes spectrometers  & \emph{instrument}  & source\_spct \\
read\_macam\_file() & Macam                     & \emph{instrument}  & source\_spct \\
read\_licor\_file() & LI-COR LI-1800            & PC1800 (MS-DOS)  & source\_spct \\
read\_m\_licor\_file() & LI-COR LI-1800            & PC1800 (MS-DOS)  & source\_mspct \\
\bottomrule
\end{tabular}
\end{table}

\begin{table}[h]
\caption{Functions for importing simulated solar spectral data from models}\label{tab:funs:simul}
\centering
\begin{tabular}{llll}
\toprule
R function & Simulation model & version \\
\midrule
read\_tuv\_usrout() & TUV (Sasha Madronich) & version 5.0 & source\_spct (long) \\
read\_fmi\_cum() & (Anders Lindfors) & daily cumulated  & source\_spct \\
read\_m\_fmi\_cum() & (Anders Lindfors) & daily cumulated & source\_mspct \\
\bottomrule
\end{tabular}
\end{table}

\begin{table}[h]
\caption{Functions for exchange of data in 'foreign' formats.}\label{tab:funs:rpkgs}
\centering
\begin{tabular}{llll}
\toprule
R function & R package & function \\
\midrule
hyperSpec2mspct() & 'hyperSpec' & import & source\_mspct \\
mspct2hyperSpec() & 'hyperSpec' & export & hyperSpec \\
rspec2mspct() & 'pavo' & import  & source\_mspct \\
\bottomrule
\end{tabular}
\end{table}

\section{Examples}

\subsection{Ocean Optics Jaz}

Reading a raw data file generated by Ocean Optics' Jaz spectrometer. The light source was the Jaz PX pulsed Xenon light module.

<<>>=
jazraw.spct <- read_oo_jazdata(file = "data-vignettes/spectrum.jaz")
jazraw.spct <- trim_wl(jazraw.spct, range = c(250, 900))
@

Plotting the spectrum.

<<>>=
plot(jazraw.spct)
@

Reading an irradiance file generated by Ocean Optics' Jaz spectrometer. The light source was a `white' fluorescent tube.

<<>>=
jaz.spct <- read_oo_jazirrad(file = "data-vignettes/spectrum.JazIrrad")
jaz0.spct <- jaz.spct
jaz.spct <- trim_wl(jaz.spct, range = c(290, 800))
@

Plotting the spectrum.

<<>>=
plot(jaz.spct)
@

We can see that the data have problems. We get a warning because the data contains
negative values for spectral irradiance. We will use some methods from package
photobiology to correct the problem. As the data are noisy we cannot just shift
the scale so that the most negative value becomes zero. Neither can we replace
all negative values with zeros, as this would create bias.

In the following code chunk we will use a region of the spectrum in which
spectral irradiance is known to be equal to zero as reference to  shift the
scale zero.

<<>>=
jaz.spct <- fshift(jaz0.spct, range = c(255, 290), f = "mean")
jaz.spct <- trim_wl(jaz.spct, range = c(290, 800))
plot(jaz.spct)
@

We can next try to smooth the spectrum as it is very noisy outside the visible region.

<<>>=
jaz.spct <- smooth_spct(jaz.spct)
plot(jaz.spct)
@

Photon and energy irradiances.

<<>>=
e_irrad(jaz.spct, PAR())       # W m-2
@


All in one statement.

<<>>=
plot(read_oo_jazirrad(file = "data-vignettes/spectrum.JazIrrad"))
@

As above but limiting the wavelength range plotted.

<<>>=
plot(read_oo_jazirrad(file = "data-vignettes/spectrum.JazIrrad"), 
     range = c(250,850))
@

Adding our custom ``adaptive'' smoothing.

<<>>=
plot(smooth_spct(read_oo_jazirrad(file = "data-vignettes/spectrum.JazIrrad")), 
     range = c(250,850))
@

\subsection{Other modular spectrometers from Ocean Optics}

Now a file from an Ocean Optics' Q6500? spectrometer.

<<>>=
plot(read_oo_ssirrad(file = "data-vignettes/spectrum.SSIrrad"))
@

\subsection{Modular spectrometers from Avantes}

Avantes' two column .csv files can also be imported.

<<>>=
plot(read_avaspec_csv(file = "data-vignettes/spectrum-avaspec.csv"),
     range = c(280, 900), unit.out = "photon")
@

\subsection{Scanning spectrometer from Macam}

Macam's single column DTA files can also be imported.

<<>>=
plot(read_macam_dta(file = "data-vignettes/spectrum.DTA"))
@

\subsection{LI-1800 scanning spectrometer from LI-COR}

And a file generated by LI-COR's PC1800 program for the LI-1800 spectroradiometer.

<<>>=
licor.spct <- read_licor_prn(file = "data-vignettes/spectrum.PRN")
@

In all cases as much information as possible is decoded, and the data file headers
are preserved as comments in the source.spct objects.

<<>>=
licor.spct
cat(comment(licor.spct))
plot(licor.spct, unit.out = "photon")
@

\subsection{Overriding default metadata}

A variable with the user supplied date and time data, or the date read from
the header (the text itself) not the file date as the file date may not reflect
the creation date and time.

<<>>=
jaz1.spct <- read_oo_jazirrad(file = "data-vignettes/spectrum.JazIrrad", date = NULL)
jaz1.spct
@

<<>>=
jaz.spct <- read_oo_jazirrad(file = "data-vignettes/spectrum.JazIrrad",
                             date = ymd_hms("2015-11-15 12:00:00"))
jaz.spct
@

<<>>=
jaz.spct <- read_oo_jazirrad(file = "data-vignettes/spectrum.JazIrrad", 
                             date = now())
jaz.spct
@

\section{Output from simulation models}

\subsection{TUV}

The output from the TUV model can be imported either by editing it before
import, or by making a simple edit to the output routine of TUV. This function
is known to work with TUV version 5.0 output. The output from TUV can contain
a variable number of spectra in ``parallel'' columns, which are \emph{melted}
into a single column, with a factor with letter as levels, a numeric variable
with the zenith angle and a POSIXct column with times. A date needs to be
always supplied as the output file from TUV has only time of day information.

<<>>=
tuv.spct <- read_tuv_usrout(file = "data-vignettes/usrout.txt", 
                            date = ymd("2014-03-21"))
summary(subset(tuv.spct, spct.idx == "A"))
tuv.spct
@

It is possible to extract individual spectra with subset, or as done here
plot them in different panels.

<<fig.height=10>>=
plot(tuv.spct, annotations = c("colour.guide")) +
  facet_wrap(~date, ncol = 2)
@

The output is a single \texttt{source\_spct} object that can be easily converted
into a \texttt{source\_mspct} object containing the individual spectra as
members of the collection.

<<>>=
tuv.mspct <- subset2mspct(tuv.spct)
tuv.mspct
@

With the default of \texttt{lubridate::today()} for date times are `mapped' to
the current local date using the time zone of the computer as visible to R.

<<>>=
tuv_nd.spct <- read_tuv_usrout(file = "data-vignettes/usrout.txt")
tuv_nd.spct
@

\subsection{libRadtran}

By default 'libRadtran' writes only spectral irradiances to a text file as output. This is different from 'TUV' which by default includes an extensive header with the parameter settings used for the simulation.

We give two examples, which will most likely need some adjustment by users
\subsection{Models developed by Anders Lindfors}

Functions \texttt{read\_fmi\_cum} and \texttt{read\_m\_fmi\_cum} can be used to read text files
output by a simulation model
of solar spectral irradiance. The model was developed at the Finnish
Meteorological Institute (FMI) by Dr.\ Anders Lindfors and collaborators.

We can read an individual file into a \texttt{source\_spct} object while adding
some metadata.

<<>>=
z.spct <- read_fmi_cum("data-vignettes/2014-08-21_cum.hel")
class_spct(z.spct)
getWhenMeasured(z.spct)
z.spct
@

<<>>=
z.mspct <- read_m_fmi_cum("data-vignettes/2014-08-21_cum.hel")
class(z.mspct)
getWhenMeasured(z.mspct)
z.mspct
@

<<>>=
z.mspct <- read_m_fmi_cum(c("data-vignettes/2014-08-21_cum.hel",
                            "data-vignettes/2014-08-22_cum.hel"))
class(z.mspct)
getWhenMeasured(z.mspct)
z.mspct
@

<<>>=
files <- system("ls ./data-vignettes/*cum.hel", intern = TRUE)
z1.mspct <- read_m_fmi_cum(files)
class(z1.mspct)
getWhenMeasured(z1.mspct)
z1.mspct
@

<<message=FALSE>>=
z2.mspct <-
  read_m_fmi_cum(files,
                 geocode = geocode("Kumpula, Helsinki, Finland",
                                   source = "google"))
class(z2.mspct)
getWhenMeasured(z2.mspct)
getWhereMeasured(z2.mspct)
z2.mspct
@

\section{Other R packages}

\subsection{To 'hyperSpec'}

Can export to "hyperSpec" objects only collections of spectra where all members have identical \texttt{w.length} vectors, as objects of class \texttt{hypeSpec} store a single vector of wavelengths for the whole collection of spectra.

<<>>=
z2.hspct <- mspct2hyperSpec(z2.mspct, "s.e.irrad")
class(z2.hspct)
plot(z2.hspct)
@

\subsection{From 'hyperSpec'}

Can import only data with wavelength in nanometres. Other quantities and units are not supported by the 'photobiology' classes for spectral data. See package 'hyperSpec' vignette "laser" for details on the data and the conversion of the original wavelength units into nanometres.

<<>>=
class(laser)
laser
plot(laser)
@

We assume here, that the quantity for the spectral emission of the laser is 
spectral \textit{energy} irradiance, expressed in \mwattnm. This is likely to be
wrong but for the sake of showing how the conversion takes place is irrelevant.
The parameter \texttt{multiplier} can be passed a numeric argument to rescale
the original data. The default multiplier is 1.

<<>>=
wl(laser) <- list (
  wl = 1e7 / (1/405e-7 - wl (laser)),
  label = expression (lambda / nm)
)
laser
plot(laser)
laser.mspct <- 
  hyperSpec2mspct(laser, "source_spct", "s.e.irrad", multiplier = 1e-3)
ggplot(laser.mspct[[1]]) +
  geom_line() +
  stat_peaks(geom = "text", vjust = -1, label.fmt = "%.6g nm", color = "red")
@

\subsection{From 'pavo'}

In this example we convert an \texttt{rspec} object from package `pavo' into a collection of spectra and then we plot it with \texttt{ggplot} methods from package `ggspectra' (an extension to `ggplot2'). The data are the spectral reflectance of the plumage from seven different individual birds of the same species, measured in three different body parts.

<<>>=
data(sicalis)
class(sicalis)
names(sicalis)
@

We convert the data into a collection of spectra, and calculate summaries for three spectra.

<<>>=
sicalis.mspct <- rspec2mspct(sicalis, "reflector_spct", "Rpc")
summary(sicalis.mspct[[1]])
summary(sicalis.mspct[[2]])
summary(sicalis.mspct[[3]])
@

We convert the subset of the collection corresponding to the first individual into a single spectra object for plotting with \texttt{ggplot}.

<<>>=
ggplot(rbindspct(sicalis.mspct[1:3])) + 
  aes(linetype = spct.idx) + 
  ylim(0,0.3) +
  geom_line()
@

Here we extract the ``crown'' data from all individuals and plot these spectra in a single plot.

<<>>=
print(sicalis.mspct[c(TRUE, FALSE, FALSE)])
ggplot(rbindspct(sicalis.mspct[c(TRUE, FALSE, FALSE)])) + 
  aes(linetype = spct.idx) + 
  ylim(0,0.15) +
  geom_line() +
  ggtitle("'crown' reflectance spectra")
@

We we calcualte the mean reflectance in wavebands corresponing to ISO colors obtaining a data frame. We then add to this retruned data frame a factor indicating the body parts.

<<>>=
refl.by.band <- reflectance(sicalis.mspct, w.band = list(Red(), Green(), Blue(), UVA()))
refl.by.band$body.part <- c("crown", "throat", "breast")
@

<<>>=
refl.red <- reflectance(sicalis.mspct, w.band = Red())
names(refl.red)[2] <- "red.reflectance"
refl.red$body.part <- c("crown", "throat", "breast")
ggplot(refl.red, aes(x = body.part, y = red.reflectance)) +
  stat_summary(fun.data = "mean_se", color = "red") +
  geom_point(alpha = 0.5)
@

\end{document} 